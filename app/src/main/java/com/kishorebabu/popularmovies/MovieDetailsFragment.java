package com.kishorebabu.popularmovies;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.kishorebabu.popularmovies.model.Movie;import com.kishorebabu.popularmovies.model.MovieReview;import com.kishorebabu.popularmovies.model.MovieReviewList;import com.kishorebabu.popularmovies.model.MovieTrailer;import com.kishorebabu.popularmovies.model.MovieTrailersList;import com.squareup.picasso.Picasso;import org.joda.time.DateTime;import java.util.List;import retrofit.Callback;import retrofit.Response;import retrofit.Retrofit;import timber.log.Timber;public class MovieDetailsFragment extends Fragment {    private MovieDBApi movieDBApi;    private TextView reviewLabel;    private LinearLayout reviewsHolder;    private TextView trailersLabel;    private LinearLayout trailersHolder;    public static MovieDetailsFragment newInstance(Movie movie) {        Bundle args = new Bundle();        args.putParcelable(Constants.KEY_MOVIE, movie);        MovieDetailsFragment fragment = new MovieDetailsFragment();        fragment.setArguments(args);        return fragment;    }    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        Timber.tag(MovieDetailsFragment.class.getSimpleName());        View view = inflater.inflate(R.layout.fragment_movie_details, container, false);        movieDBApi = PopularMoviesApplication.getServiceSharedInstance();        ImageView moviePoster = (ImageView) view.findViewById(R.id.movie_poster);        TextView movieReleaseYear = (TextView) view.findViewById(R.id.movie_release_year);        TextView movieLength = (TextView) view.findViewById(R.id.movie_length);        TextView movieRating = (TextView) view.findViewById(R.id.movie_rating);        TextView movieDesc = (TextView) view.findViewById(R.id.movie_desc);        reviewLabel = (TextView) view.findViewById(R.id.review_label);        reviewsHolder = (LinearLayout) view.findViewById(R.id.movie_reviews_holder);        trailersLabel = (TextView) view.findViewById(R.id.trailers_label);        trailersHolder = (LinearLayout) view.findViewById(R.id.movie_trailers_holder);        Bundle bundle = getArguments();        if (bundle != null) {            Movie movie = bundle.getParcelable(Constants.KEY_MOVIE);            if (movie != null) {                movieReleaseYear.setText(String.valueOf(DateTime.parse(movie.getReleaseDate()).getYear()));                movieLength.setText(movie.getRuntime() != null ? String.format("%smin", String.valueOf(movie.getRuntime())) : "");                movieRating.setText(String.format("%s/10", String.valueOf(movie.getVoteAverage())));                movieDesc.setText(movie.getOverview());                Picasso.with(getActivity())                        .load(String.format("http://image.tmdb.org/t/p/w185/%s", movie.getPosterPath()))                        .into(moviePoster);            }            fetchTrailers(movie);            fetchReviews(movie);            return view;        }        return super.onCreateView(inflater, container, savedInstanceState);    }    private void fetchReviews(Movie movie) {        if (movieDBApi != null) {            movieDBApi.getReviewsForMovie(movie.getId(), BuildConfig.TMDB_API_KEY).enqueue(new Callback<MovieReviewList>() {                @Override                public void onResponse(Response<MovieReviewList> response, Retrofit retrofit) {                    if (response.isSuccess() && response.body() != null) {                        MovieReviewList reviewList = response.body();                        List<MovieReview> reviews = reviewList.getResults();                        Timber.d("Reviews list size: %d", reviews.size());                        populateReviews(reviews);                    } else {                        Timber.e("Response Failed to get Movie reviews");                    }                }                @Override                public void onFailure(Throwable t) {                    Timber.e(t, "Failed to get Movie reviews");                }            });        }    }    private void populateReviews(List<MovieReview> reviews) {        if (reviews.size() > 0) {            reviewLabel.setVisibility(View.VISIBLE);            reviewsHolder.setVisibility(View.VISIBLE);            reviewsHolder.removeAllViews();            LayoutInflater inflater = getActivity().getLayoutInflater();            for (MovieReview review : reviews) {                ViewGroup reviewContainer = (ViewGroup) inflater.inflate(R.layout.item_movie_review, reviewsHolder,                        false);                TextView reviewAuthor = (TextView) reviewContainer.findViewById(R.id.review_author);                TextView reviewContent = (TextView) reviewContainer.findViewById(R.id.review_content);                reviewAuthor.setText(review.getAuthor());                reviewContent.setText(review.getContent());                reviewsHolder.addView(reviewContainer);            }        } else {            reviewLabel.setVisibility(View.GONE);            reviewsHolder.setVisibility(View.GONE);        }    }    private void fetchTrailers(final Movie movie) {        if (movieDBApi != null) {            movieDBApi.getTrailersForMovie(movie.getId(), BuildConfig.TMDB_API_KEY).enqueue(new Callback<MovieTrailersList>() {                @Override                public void onResponse(Response<MovieTrailersList> response, Retrofit retrofit) {                    if (response.isSuccess() && response.body() != null) {                        MovieTrailersList movieTrailers = response.body();                        populateTrailers(movieTrailers);                    } else {                        Timber.e("failed to get movie trailers");                    }                }                @Override                public void onFailure(Throwable t) {                    Timber.e(t, "Failed to get movie trailers. ID: %d", movie.getId());                }            });        }    }    private void populateTrailers(@NonNull MovieTrailersList movieTrailers) {        if (movieTrailers.getResults() != null && movieTrailers.getResults().size() > 0) {            trailersLabel.setVisibility(View.VISIBLE);            trailersHolder.setVisibility(View.VISIBLE);            trailersHolder.removeAllViews();            LayoutInflater inflater = getActivity().getLayoutInflater();            List<MovieTrailer> trailers = movieTrailers.getResults();            Picasso picasso = Picasso.with(getContext());            for (MovieTrailer trailer : trailers) {                ViewGroup thumbContainer = (ViewGroup) inflater.inflate(R.layout.item_movie_trailer, trailersHolder, false);                ImageView thumbView = (ImageView) thumbContainer.findViewById(R.id.video_thumb);                thumbView.setTag(MovieTrailer.getUrl(trailer));                thumbView.requestLayout();                thumbView.setOnClickListener(new TrailerClickListener());                picasso                        .load(MovieTrailer.getThumbnailUrl(trailer))                        .resizeDimen(R.dimen.video_width, R.dimen.video_height)                        .centerCrop()                        .placeholder(R.color.colorPrimary)                        .into(thumbView);                trailersHolder.addView(thumbContainer);            }        } else {            trailersLabel.setVisibility(View.GONE);            trailersHolder.setVisibility(View.GONE);        }    }    @Override    public void onActivityCreated(@Nullable Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {        super.onCreateOptionsMenu(menu, inflater);    }    private class TrailerClickListener implements OnClickListener {        @Override        public void onClick(View v) {            String videoUrl = (String) v.getTag();            Intent playVideoIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(videoUrl));            startActivity(playVideoIntent);        }    }}