package com.kishorebabu.popularmovies;import android.app.ProgressDialog;import android.content.Intent;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentTransaction;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Spinner;import android.widget.Toast;import com.kishorebabu.popularmovies.model.Movie;import com.kishorebabu.popularmovies.model.MoviesList;import java.io.IOException;import java.util.List;import retrofit.Callback;import retrofit.Response;import retrofit.Retrofit;import timber.log.Timber;public class MovieListFragment extends Fragment implements MovieSelectionListener {    private static final int GRID_SPAN_WIDTH = 2;    public static final String PREF_LANGUAGE = "en"; //English    public static final int MIN_VOTE_COUNT = 100;    private MovieDBApi movieDBApi;    private RecyclerView moviesGrid;    private MoviesGridAdapter moviesGridAdapter;    private ProgressDialog progressDialog;    private int maxMostPopularMoviePages;    private int maxHighestRatedMoviePages;    private EndlessRecyclerOnScrollListener mostPopularMoviesScroller;    private EndlessRecyclerOnScrollListener highestRatedMoviesScroller;    private boolean isTabletMode = false;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        Timber.tag(MovieListFragment.class.getSimpleName());        View view = inflater.inflate(R.layout.fragment_movie_list, container, false);        Bundle bundle = getArguments();        if (bundle != null)            isTabletMode = bundle.getBoolean(Constants.IS_TABLET_MODE, false);        movieDBApi = PopularMoviesApplication.getServiceSharedInstance();        setHasOptionsMenu(true);        progressDialog = new ProgressDialog(getActivity());        progressDialog.setMessage(getString(R.string.one_moment_please));        moviesGrid = (RecyclerView) view.findViewById(R.id.moviesGrid);        GridLayoutManager gridLayoutManager = new GridLayoutManager(getActivity(), GRID_SPAN_WIDTH);        moviesGrid.setLayoutManager(gridLayoutManager);        moviesGrid.setHasFixedSize(true);        mostPopularMoviesScroller = new EndlessRecyclerOnScrollListener(gridLayoutManager) {            @Override            public void onLoadMore(int current_page) {                if (current_page <= maxMostPopularMoviePages)                    fetchMostPopularMoviesByPage(current_page);                else                    Toast.makeText(getActivity(), R.string.end_of_list, Toast.LENGTH_SHORT).show();            }        };        highestRatedMoviesScroller = new EndlessRecyclerOnScrollListener(gridLayoutManager) {            @Override            public void onLoadMore(int current_page) {                if (current_page <= maxHighestRatedMoviePages)                    fetchHighestRatedMoviesByPage(current_page);                else                    Toast.makeText(getActivity(), R.string.end_of_list, Toast.LENGTH_SHORT).show();            }        };        return view;//        return super.onCreateView(inflater, container, savedInstanceState);    }    @Override    public void onMovieSelect(Movie movie) {        if (isTabletMode) {            MovieDetailsFragment details = MovieDetailsFragment.newInstance(movie);            // Execute a transaction, replacing any existing fragment            // with this one inside the frame.            FragmentTransaction ft = getFragmentManager().beginTransaction();//                if (index == 0) {            ft.replace(R.id.container_details_qweqwe, details);//                } else {//                    ft.replace(R.id.a_item, details);//                }//                ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);            ft.commit();        } else {            Intent intent = new Intent(getActivity(), MovieDetails.class);            intent.putExtra(Constants.KEY_MOVIE, movie);            getActivity().startActivity(intent);        }    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        View detailsFrame = getActivity().findViewById(R.id.container_details_qweqwe);        isTabletMode = detailsFrame != null;        Timber.d("isTabletMode: %s", isTabletMode);    }    @Override    public void onCreateOptionsMenu(Menu menu, MenuInflater menuInflater) {//        super.onCreateOptionsMenu(menu, inflater);        menuInflater.inflate(R.menu.main, menu);        MenuItem menuItem = menu.findItem(R.id.spinner_sort_order);        View spinnerView = menuItem.getActionView();        if (spinnerView instanceof Spinner) {            final Spinner spinner = (Spinner) spinnerView;            ArrayAdapter<CharSequence> listAdapter = ArrayAdapter.createFromResource(getActivity(),                    R.array.sort_order,                    android.R.layout.simple_spinner_dropdown_item);            spinner.setAdapter(listAdapter);            spinner.setOnItemSelectedListener(new OnItemSelectedListener() {                @Override                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {                    Timber.v("position %d", position);                    switch (position) {                        case 0:                            moviesGrid.clearOnScrollListeners();                            moviesGrid.addOnScrollListener(mostPopularMoviesScroller);                            if (moviesGridAdapter != null)                                moviesGridAdapter.clearMovies();                            fetchMostPopularMoviesByPage(1);                            break;                        case 1:                            moviesGrid.clearOnScrollListeners();                            moviesGrid.addOnScrollListener(highestRatedMoviesScroller);                            if (moviesGridAdapter != null)                                moviesGridAdapter.clearMovies();                            fetchHighestRatedMoviesByPage(1);                            break;                        case 2:                            moviesGrid.clearOnScrollListeners();                            if (moviesGridAdapter != null)                                moviesGridAdapter.clearMovies();                            fetchFavoriteMovies();                            break;                        default:                            Timber.e("Unknown spinner position %d", position);                    }                }                @Override                public void onNothingSelected(AdapterView<?> parent) {                    Timber.v("Nothing is selected in sort order");                }            });        }    }    private void fetchMostPopularMoviesByPage(final int page) {        if (page == 1)            progressDialog.show();        movieDBApi.getMostPopularMovies(page, BuildConfig.TMDB_API_KEY).enqueue(new Callback<MoviesList>() {            @Override            public void onResponse(Response<MoviesList> response, Retrofit retrofit) {                if (progressDialog.isShowing())                    progressDialog.dismiss();                if (response.isSuccess()) {                    Timber.v("Fetched most popular movies successfully.");                    maxMostPopularMoviePages = response.body().getTotalPages();                    List<Movie> movies = response.body().getResults();                    Timber.v("Movies Count: %d, Page: %d", movies.size(), page);                    if (moviesGridAdapter == null)                        moviesGridAdapter = new MoviesGridAdapter(getActivity(), MovieListFragment.this);                    moviesGridAdapter.addMovies(movies);                    if (page == 1)                        moviesGrid.setAdapter(moviesGridAdapter);                } else {                    Timber.e("Failed to get movies, %s", response.raw().toString());                }            }            @Override            public void onFailure(Throwable t) {                Timber.e(t, "Failed to get highest rated movies.");            }        });    }    private void fetchHighestRatedMoviesByPage(final int page) {        if (page == 1)            progressDialog.show();        movieDBApi.getHighestRatedMovies(page, MIN_VOTE_COUNT, PREF_LANGUAGE, BuildConfig.TMDB_API_KEY).enqueue(new Callback<MoviesList>() {            @Override            public void onResponse(Response<MoviesList> response, Retrofit retrofit) {                if (progressDialog.isShowing())                    progressDialog.dismiss();                if (response.isSuccess()) {                    Timber.v("Fetched Highest rated movies successfully.");                    List<Movie> movies = response.body().getResults();                    Timber.v("Movies Count: %d", movies.size());                    maxHighestRatedMoviePages = response.body().getTotalPages();                    if (moviesGridAdapter == null)                        moviesGridAdapter = new MoviesGridAdapter(getActivity(), MovieListFragment.this);                    moviesGridAdapter.addMovies(movies);                    if (page == 1)                        moviesGrid.setAdapter(moviesGridAdapter);                }            }            @Override            public void onFailure(Throwable t) {                Timber.e(t, "Failed to get highest rated movies.");            }        });    }    private void fetchFavoriteMovies() {        MovieSharedPref sharedPref = new MovieSharedPref();        try {            List<Movie> movies = sharedPref.getFavorites();            Timber.v("Movies Count: %d", movies.size());            if (moviesGridAdapter == null)                moviesGridAdapter = new MoviesGridAdapter(getActivity(), MovieListFragment.this);            moviesGridAdapter.addMovies(movies);        } catch (IOException e) {            Timber.e(e, "Failed to get favorite movies.");        }    }}