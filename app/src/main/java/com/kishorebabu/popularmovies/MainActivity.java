package com.kishorebabu.popularmovies;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.RecyclerView;import android.widget.Toast;import com.kishorebabu.popularmovies.model.Movie;import com.kishorebabu.popularmovies.model.MoviesList;import java.util.List;import retrofit.Callback;import retrofit.Response;import retrofit.Retrofit;import timber.log.Timber;public class MainActivity extends AppCompatActivity {    public static final int GRID_SPAN_WIDTH = 2;    MovieDBApi movieDBApi;    RecyclerView moviesGrid;    MoviesGridAdapter moviesGridAdapter;    private int maxPages;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Timber.tag("MainActivity");        movieDBApi = PopularMoviesApplication.getServiceSharedInstance();        moviesGrid = (RecyclerView) findViewById(R.id.moviesGrid);        GridLayoutManager gridLayoutManager = new GridLayoutManager(this, GRID_SPAN_WIDTH);        moviesGrid.setLayoutManager(gridLayoutManager);        moviesGrid.setHasFixedSize(true);        moviesGrid.addOnScrollListener(new EndlessRecyclerOnScrollListener(gridLayoutManager) {            @Override            public void onLoadMore(int current_page) {                if (current_page <= maxPages)                    fetchMostPopularMoviesByPage(current_page);                else                    Toast.makeText(MainActivity.this, R.string.end_of_list, Toast.LENGTH_SHORT).show();            }        });        //begin fetch with first page        fetchMostPopularMoviesByPage(1);//        movieDBApi.getMovieByID(293660, BuildConfig.TMDB_API_KEY).enqueue(new Callback<Movie>() {//            @Override//            public void onResponse(Response<Movie> response, Retrofit retrofit) {//                if (response.isSuccess()) {//                    Timber.v("Movie retrieved successfully.");//                }//            }////            @Override//            public void onFailure(Throwable t) {//                Timber.e(t, "Failed to get the movie");//            }//        });//        movieDBApi.getHighestRatedMovies(BuildConfig.TMDB_API_KEY).enqueue(new Callback<MoviesList>() {//            @Override//            public void onResponse(Response<MoviesList> response, Retrofit retrofit) {//                if (response.isSuccess()) {//                    Timber.v("Fetched Highest rated movies successfully.");//                    MoviesList list = response.body();//                    Timber.v("Movies Count: %d", list.getResults().size());//                }//            }////            @Override//            public void onFailure(Throwable t) {//                Timber.e(t, "Failed to get highest rated movies.");//            }//        });    }    private void fetchMostPopularMoviesByPage(final int page) {        movieDBApi.getMostPopularMovies(page, BuildConfig.TMDB_API_KEY).enqueue(new Callback<MoviesList>() {            @Override            public void onResponse(Response<MoviesList> response, Retrofit retrofit) {                if (response.isSuccess()) {                    Timber.v("Fetched most popular movies successfully.");                    maxPages = response.body().getTotalPages();                    List<Movie> movies = response.body().getResults();                    Timber.v("Movies Count: %d, Page: %d", movies.size(), page);                    if (moviesGridAdapter == null)                        moviesGridAdapter = new MoviesGridAdapter(MainActivity.this);                    moviesGridAdapter.addMovies(movies);                    if (page == 1)                        moviesGrid.setAdapter(moviesGridAdapter);                } else {                    Timber.e("Failed to get movies, %s", response.raw().toString());                }            }            @Override            public void onFailure(Throwable t) {                Timber.e(t, "Failed to get highest rated movies.");            }        });    }}